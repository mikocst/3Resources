---
---

<div id="three-container"></div>

<style>
  #three-container {
    width: 100%;
    height: 22rem; /* Full viewport height */
    display: block;
    position:absolute;
    z-index: -1;
    top:-40%;
  }

  @media (max-width: 1190px) {
    #three-container {
      top: -5%;
    }
  }

  @media (max-width: 830px) {
    #three-container {
      top: 25%;
    }
  }

  @media (max-width: 792px) {
    #three-container {
      top: 45%;
    }
  }

  @media (max-width: 640px) {
    #three-container {
      top: 33%;
    }
  }

  @media (max-width: 414px) {
    #three-container {
      top: 50%;
    }
  }
</style>

<script>
  import * as THREE from "three";
  import vertexShader from "../shaders/vertex.glsl";
  import fragmentShader from "../shaders/fragment.glsl";

  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('three-container');
    
    // Set up the scene, camera, and renderer
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({
        alpha: true,
        antialias: true
    });
    renderer.setSize(container.clientWidth, container.clientHeight);
    container.appendChild(renderer.domElement);

    // Geometry
    const geometry = new THREE.TorusKnotGeometry();
    const material = new THREE.ShaderMaterial({
      vertexShader,
      fragmentShader,
      uniforms: {
        uTime: {value: 0.4},
      }
    });
    const sphere = new THREE.Mesh(geometry, material);
    scene.add(sphere);

    // Position the camera
    camera.position.x = -6;
    camera.position.y = -0.1;
    camera.position.z = 3.5;

    // Animation loop
    const animate = function () {
      requestAnimationFrame(animate);

      material.uniforms.uTime.value += 0.01;
      sphere.rotation.x = -6;
      

      renderer.render(scene, camera);
    };

    animate();

    // Handle window resize
    window.addEventListener('resize', () => {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);

      if (window.innerWidth < 640) {
        camera.position.set(0,2,6);
      }

      else if (window.innerWidth < 830) {
        camera.position.set(0,1.8,6)
      }

      else if (window.innerWidth < 1190) {
        camera.position.set(0,2.4,6)
      }

      else {
        camera.position.set(-6,-0.1,3.5);
      }
    });
  });
</script>